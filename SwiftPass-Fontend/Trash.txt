import React from 'react';
import { useDispatch } from 'react-redux';
import { login, logout } from './authSlice';

const App = () => {
  const dispatch = useDispatch();

  const handleLogin = () => {
    dispatch(login({ user: 'JohnDoe', token: 'abcd1234' }));
  };

  const handleLogout = () => {
    dispatch(logout());
  };

  return (
    <div>
      <button onClick={handleLogin}>Login</button>
      <button onClick={handleLogout}>Logout</button>
    </div>
  );
};

export default App;


 <Pressable
        style={styles.button}
        onPress={handleSubmit}
        onPress={() => navigation.navigate("Login")}
      >
        <Text style={styles.buttonText}>SignUp</Text>
      </Pressable>










// import React from "react";
// import { NavigationContainer } from "@react-navigation/native";
// import { useSelector } from "react-redux";
// import AuthStack from "./AuthStack";
// import MyStack from "./MyStack";

// const RootNavigator = () => {
//   const { isAuthenticated } = useSelector((state) => state.login);

//   return (
//     <NavigationContainer>
//       {isAuthenticated ? <MyStack /> : <AuthStack />}
//     </NavigationContainer>
//   );
// };

// export default RootNavigator;






Register cide 


import React, { useState, useEffect } from "react";
import {
  View,
  Text,
  TextInput,
  Button,
  StyleSheet,
  Pressable,
} from "react-native";
import { useNavigation } from "@react-navigation/native";
import { useDispatch, useSelector } from "react-redux";
import { registerUser } from "../features/auth/authActions";

const RegisterScreen = () => {
  const navigation = useNavigation();
  const dispatch = useDispatch();
  const { loading, error, success, userInfo } = useSelector(
    (state) => state.auth
  );

  const [formData, setFormData] = useState({
    fullname: "",
    username: "",
    password: "",
    confirmPassword: "",
  });

  const handleChange = (name, value) => {
    setFormData({
      ...formData,
      [name]: value,
    });
  };

  const handleSignUp = () => {
    if (formData.password !== formData.confirmPassword) {
      alert("Password does not match");
      return;
    }
    if (
      !formData.fullname ||
      !formData.username ||
      !formData.password ||
      !formData.confirmPassword
    ) {
      alert("Please fill all fields");
      return;
    }
    dispatch(
      registerUser({ ...formData, username: formData.username.toLowerCase() })
    );
  };

  useEffect(() => {
    if (success) {
      navigation.navigate("Login");
    }
    if (error) {
      alert(error);
    }
  }, [success, error]);

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Register Screen</Text>

      <TextInput
        style={styles.input}
        placeholder="Full Name"
        value={formData.fullname}
        onChangeText={(text) => handleChange("fullname", text)}
      />
      <TextInput
        style={styles.input}
        placeholder="Username"
        value={formData.username}
        onChangeText={(text) => handleChange("username", text)}
      />
      <TextInput
        style={styles.input}
        placeholder="Password"
        secureTextEntry
        value={formData.password}
        onChangeText={(text) => handleChange("password", text)}
      />
      <TextInput
        style={styles.input}
        placeholder="Confirm Password"
        secureTextEntry
        value={formData.confirmPassword}
        onChangeText={(text) => handleChange("confirmPassword", text)}
      />
      <Pressable style={styles.button} onPress={handleSignUp}>
        <Text style={styles.buttonText}>SignUp</Text>
      </Pressable>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    padding: 16,
    backgroundColor: "#f5f5f5",
    marginTop: 110,
  },
  title: {
    fontSize: 30,
    fontWeight: "bold",
    marginBottom: 24,
    textAlign: "center",
  },
  input: {
    height: 50,
    borderColor: "#ccc",
    borderWidth: 1,
    borderRadius: 5,
    marginBottom: 12,
    paddingHorizontal: 10,
    width: 330,
    fontSize: 16,
  },
  button: {
    backgroundColor: "#04041D",
    padding: 14,
    borderRadius: 3,
    alignItems: "center",
  },
  buttonText: {
    color: "#fff",
    fontSize: 20,
  },
  loginButton: {
    marginTop: 10,
    backgroundColor: "#007BFF",
  },
});

export default RegisterScreen;




// Initial state
const initialState = {
  loading: false,
  userInfo: null,
  userToken: null,
  error: null,
  success: false,
};

// Slice
const authSlice = createSlice({
  name: "auth",
  initialState,
  reducers: {
    logout: (state) => {
      state.userInfo = null;
      state.userToken = null;
      AsyncStorage.removeItem("userToken");
      AsyncStorage.removeItem("userInfo");
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(userLogin.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(userLogin.fulfilled, (state, { payload }) => {
        state.loading = false;
        state.userInfo = payload.userInfo;
        state.userToken = payload.userToken;
        state.success = true;
      })
      .addCase(userLogin.rejected, (state, { payload }) => {
        state.loading = false;
        state.error = payload;
        state.success = false;
      })
      .addCase(loadUser.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(loadUser.fulfilled, (state, { payload }) => {
        state.loading = false;
        state.userInfo = payload.userInfo;
        state.userToken = payload.userToken;
      })
      .addCase(loadUser.rejected, (state, { payload }) => {
        state.loading = false;
        state.error = payload;
      });
  },
});

export { userLogin };
export const { logout } = authSlice.actions;





// this for the keyform information for the keyform information 



import React, { useState } from "react";
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
} from "react-native";
import { useNavigation } from "@react-navigation/native";
import AsyncStorage from "@react-native-async-storage/async-storage";
import Feather from "@expo/vector-icons/Feather";

function KeyForm() {
  const [code, setCode] = useState("");
  const [key, setKey] = useState(true);
  const navigation = useNavigation();

  async function handleKeyPress(key) {
    try {
      if (key === "Clear") {
        setCode("");
      } else if (key === "Delete") {
        setCode(code.slice(0, -1));
      } else {
        const newCode = (code + key).trim();
        setCode(newCode);

        if (newCode.length >= 6) {
          const savedData = await AsyncStorage.getItem("keyCode");

          if (savedData) {
            const { key: savedKey } = JSON.parse(savedData);

            // If the saved key matches the entered key, navigate to Login
            if (savedKey === newCode) {
              navigation.navigate("Login");
            } else {
              // If the entered key doesn't match the saved key, navigate to Register
              await AsyncStorage.setItem(
                "keyCode",
                JSON.stringify({ key: newCode })
              );
              navigation.navigate("Register");
            }
          } else {
            // If no saved key exists, save the new key and navigate to Register
            await AsyncStorage.setItem(
              "keyCode",
              JSON.stringify({ key: newCode })
            );
            navigation.navigate("Register");
          }
        }
      }
    } catch (error) {
      console.error("Error handling key press:", error);
    }
  }

  async function saveKeyData(code) {
    try {
      // Save the key without any expiration logic
      await AsyncStorage.setItem("keyCode", JSON.stringify({ key: code }));
    } catch (error) {
      console.error("Error saving key data:", error);
    }
  }

  function handlekey() {
    setKey((prev) => !prev);
  }

  return (
    <View style={styles.container}>
      <TouchableOpacity onPress={handlekey}>
        <TextInput style={styles.input} value={code} editable={false} />
      </TouchableOpacity>
      {!key && (
        <View style={styles.keypad}>
          <View style={styles.row}>
            <TouchableOpacity
              style={styles.key}
              onPress={() => handleKeyPress("1")}
            >
              <Text style={styles.keyText}>1</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={styles.key}
              onPress={() => handleKeyPress("2")}
            >
              <Text style={styles.keyText}>2</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={styles.key}
              onPress={() => handleKeyPress("3")}
            >
              <Text style={styles.keyText}>3</Text>
            </TouchableOpacity>
          </View>
          <View style={styles.row}>
            <TouchableOpacity
              style={styles.key}
              onPress={() => handleKeyPress("4")}
            >
              <Text style={styles.keyText}>4</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={styles.key}
              onPress={() => handleKeyPress("5")}
            >
              <Text style={styles.keyText}>5</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={styles.key}
              onPress={() => handleKeyPress("6")}
            >
              <Text style={styles.keyText}>6</Text>
            </TouchableOpacity>
          </View>
          <View style={styles.row}>
            <TouchableOpacity
              style={styles.key}
              onPress={() => handleKeyPress("7")}
            >
              <Text style={styles.keyText}>7</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={styles.key}
              onPress={() => handleKeyPress("8")}
            >
              <Text style={styles.keyText}>8</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={styles.key}
              onPress={() => handleKeyPress("9")}
            >
              <Text style={styles.keyText}>9</Text>
            </TouchableOpacity>
          </View>
          <View style={styles.row}>
            <TouchableOpacity
              style={[styles.key, styles.keyColor]}
              onPress={() => handleKeyPress("Clear")}
            >
              <Text style={styles.keyText}></Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={styles.key}
              onPress={() => handleKeyPress("0")}
            >
              <Text style={styles.keyText}>0</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={[styles.key, styles.keyColor]}
              onPress={() => handleKeyPress("Delete")}
            >
              <Text style={styles.keyText}>
                <Feather name="delete" size={24} color="black" />
              </Text>
            </TouchableOpacity>
          </View>
        </View>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    marginTop: 110,
  },
  input: {
    height: 40,
    borderColor: "gray",
    borderWidth: 1,
    marginBottom: 20,
    width: 313,
    textAlign: "center",
  },
  keypad: {
    flexDirection: "column",
    justifyContent: "center",
  },
  row: {
    flexDirection: "row",
    justifyContent: "center",
  },
  key: {
    width: 100,
    height: 40,
    margin: 5,
    backgroundColor: "#ddd",
    alignItems: "center",
    justifyContent: "center",
  },
  keyText: {
    fontSize: 20,
  },
  keyColor: {
    backgroundColor: "#ddd",
  },
});

export default KeyForm;







/// this is to store and get  AsyncStorage  in your React native App

const storeObject = async (key, obj) => {
  await AsyncStorage.setItem(key, JSON.stringify(obj));
};

const getObject = async (key) => {
  const value = await AsyncStorage.getItem(key);
  return value ? JSON.parse(value) : null;
};




import React from "react";
import { View, Text, Button } from "react-native";
import { useDispatch } from "react-redux";
import { logout } from "../features/auth/loginSlice";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { useNavigation } from "@react-navigation/native";

const ProfileScreen = () => {
  const dispatch = useDispatch();
  const navigation = useNavigation();

  const handleLogout = async () => {
    // Step 1: Remove tokens from AsyncStorage
    await AsyncStorage.removeItem("accessToken");
    await AsyncStorage.removeItem("userInfo");

    // Step 2: Dispatch the logout action to reset Redux state
    dispatch(logout());

    // Step 3: Navigate to the login screen or another screen
    navigation.navigate("Login");
  };

  return (
    <View>
      <Text>Welcome to the Profile Screen</Text>
      <Button title="Logout" onPress={handleLogout} />
    </View>
  );
};

export default ProfileScreen;
